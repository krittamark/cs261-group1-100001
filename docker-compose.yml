
x-kong-config:
  &kong-env
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: kong-database
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}

volumes:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs


x-kong-config:
  &kong-env
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: kong-database
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}

volumes:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs

services:

  mssql:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: mssql
    ports:
      - "1433:1433"
    env_file:
      - .env
    networks:
      - kong-net
    environment:
      SA_PASSWORD: ${SA_PASSWORD}
      ACCEPT_EULA: Y
    volumes:
      - ./init-scripts:/docker-entrypoint-initdb.d
    command: /opt/mssql/bin/sqlservr & /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "${SA_PASSWORD}" -i /docker-entrypoint-initdb.d/startup.sql -C
    networks:
      - webnet

  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/public:/usr/app/public
    command: npm start
    networks:
      - kong-net

  backend:
    build: ./backend
    container_name: backend
    working_dir: /usr/app
    restart: always
    depends_on:
      - mssql
    networks:
      - webnet


# network
networks:
  kong-net:
    external: false